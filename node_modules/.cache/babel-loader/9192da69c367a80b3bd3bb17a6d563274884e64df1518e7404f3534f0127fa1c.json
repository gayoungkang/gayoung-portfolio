{"ast":null,"code":"var _jsxFileName = \"/Users/gayoung/Documents/developer/project/protfolio/src/components/Feedback/LazyImage.tsx\",\n  _s = $RefreshSig$();\nimport Skeleton from \"@/components/Feedback/Skeleton\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**---------------------------------------------------------------------------/\n  * ! LazyImage 컴포넌트\n  * * 이미지가 로드되는 동안 Skeleton을 표시하는 컴포넌트\n  * * `src`: 로드할 이미지의 URL을 설정\n  * * `alt`: 이미지의 대체 텍스트를 설정\n  * * `$width`: 이미지 및 Skeleton의 너비를 설정 (기본값: '100px')\n  * * `$height`: 이미지 및 Skeleton의 높이를 설정 (기본값: '100px')\n  * * `...others`: Skeleton 컴포넌트에서 지원하는 추가 스타일 속성\n  * * `imageLoaded`: 이미지 로딩 상태를 관리하는 state\n  * * `useEffect`: 이미지가 로드되면 `imageLoaded` 상태를 `true`로 변경\n  * * `Skeleton`: 이미지가 로드되기 전까지 보여줄 로딩 UI\n  * * `<img>`: 이미지 로드 완료 후 표시되는 실제 이미지\n/**--------------------------------------------------------------------------*/\n\nconst LazyImage = ({\n  src,\n  alt,\n  width = \"100px\",\n  height = \"100px\",\n  ...others\n}) => {\n  _s();\n  const [imageLoaded, setImageLoaded] = useState(false);\n  useEffect(() => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => setImageLoaded(true);\n  }, [src]);\n  return !imageLoaded ? /*#__PURE__*/_jsxDEV(\"img\", {\n    src: src,\n    alt: alt,\n    loading: \"lazy\",\n    width: width,\n    height: height\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n    $width: width,\n    $height: height,\n    ...others\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(LazyImage, \"E9VGM99JSJJEmDL3H7BB2dQ5zTs=\");\n_c = LazyImage;\nexport default LazyImage;\nvar _c;\n$RefreshReg$(_c, \"LazyImage\");","map":{"version":3,"names":["Skeleton","useState","useEffect","jsxDEV","_jsxDEV","LazyImage","src","alt","width","height","others","_s","imageLoaded","setImageLoaded","img","Image","onload","loading","fileName","_jsxFileName","lineNumber","columnNumber","$width","$height","_c","$RefreshReg$"],"sources":["/Users/gayoung/Documents/developer/project/protfolio/src/components/Feedback/LazyImage.tsx"],"sourcesContent":["import Skeleton, { SkeletonProps } from \"@/components/Feedback/Skeleton\";\nimport { useState, useEffect } from \"react\";\n\nexport type LazyImageProps = SkeletonProps & {\n  src: string;\n  alt: string;\n  width?: string;\n  height?: string;\n};\n/**---------------------------------------------------------------------------/\n  * ! LazyImage 컴포넌트\n  * * 이미지가 로드되는 동안 Skeleton을 표시하는 컴포넌트\n  * * `src`: 로드할 이미지의 URL을 설정\n  * * `alt`: 이미지의 대체 텍스트를 설정\n  * * `$width`: 이미지 및 Skeleton의 너비를 설정 (기본값: '100px')\n  * * `$height`: 이미지 및 Skeleton의 높이를 설정 (기본값: '100px')\n  * * `...others`: Skeleton 컴포넌트에서 지원하는 추가 스타일 속성\n  * * `imageLoaded`: 이미지 로딩 상태를 관리하는 state\n  * * `useEffect`: 이미지가 로드되면 `imageLoaded` 상태를 `true`로 변경\n  * * `Skeleton`: 이미지가 로드되기 전까지 보여줄 로딩 UI\n  * * `<img>`: 이미지 로드 완료 후 표시되는 실제 이미지\n/**--------------------------------------------------------------------------*/\n\nconst LazyImage = ({\n  src,\n  alt,\n  width = \"100px\",\n  height = \"100px\",\n\n  ...others\n}: LazyImageProps) => {\n  const [imageLoaded, setImageLoaded] = useState(false);\n\n  useEffect(() => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => setImageLoaded(true);\n  }, [src]);\n\n  return !imageLoaded ? (\n    <img src={src} alt={alt} loading='lazy' width={width} height={height} />\n  ) : (\n    <Skeleton $width={width} $height={height} {...others} />\n  );\n};\n\nexport default LazyImage;\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAyB,gCAAgC;AACxE,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGA,CAAC;EACjBC,GAAG;EACHC,GAAG;EACHC,KAAK,GAAG,OAAO;EACfC,MAAM,GAAG,OAAO;EAEhB,GAAGC;AACW,CAAC,KAAK;EAAAC,EAAA;EACpB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACd,MAAMY,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBD,GAAG,CAACR,GAAG,GAAGA,GAAG;IACbQ,GAAG,CAACE,MAAM,GAAG,MAAMH,cAAc,CAAC,IAAI,CAAC;EACzC,CAAC,EAAE,CAACP,GAAG,CAAC,CAAC;EAET,OAAO,CAACM,WAAW,gBACjBR,OAAA;IAAKE,GAAG,EAAEA,GAAI;IAACC,GAAG,EAAEA,GAAI;IAACU,OAAO,EAAC,MAAM;IAACT,KAAK,EAAEA,KAAM;IAACC,MAAM,EAAEA;EAAO;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAExEjB,OAAA,CAACJ,QAAQ;IAACsB,MAAM,EAAEd,KAAM;IAACe,OAAO,EAAEd,MAAO;IAAA,GAAKC;EAAM;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CACxD;AACH,CAAC;AAACV,EAAA,CArBIN,SAAS;AAAAmB,EAAA,GAATnB,SAAS;AAuBf,eAAeA,SAAS;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}