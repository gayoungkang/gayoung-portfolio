{"ast":null,"code":"var _jsxFileName = \"/Users/gayoung/Documents/developer/project/protfolio/src/components/Typography/Typography.tsx\";\nimport { theme } from \"@/styles/theme\";\nimport { styled } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**---------------------------------------------------------------------------/\n  * ! Typography 컴포넌트\n  * * 다양한 텍스트 스타일을 적용할 수 있는 컴포넌트\n  * * `$variant`: \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"p\", \"span\"으로 텍스트 유형 지정 가능\n  * * `$color`: 텍스트 색상 설정, 기본값은 `theme.colors.grey[100]`\n  * * `$fontWeight`: 텍스트의 폰트 두께 설정\n  * * `$fontFamily`: 폰트 종류 지정, `\"kr\"` (한글), `\"en\"` (영어) 선택 가능\n  * * `$fontSize`: 폰트 크기 설정\n  * * `$lineHeight`: 텍스트의 줄 높이 설정\n  * * `$textAlign`: 텍스트 정렬, `\"left\"`, `\"center\"`, `\"right\"`, `\"justify\"` 중 선택 가능\n  * * `$marginTop`, `$marginBottom`, `$marginLeft`, `$marginRight`: 텍스트 주변 마진 설정\n  * * `span` 태그를 제외한 나머지 블록 요소에서 마진이 적용됨\n  * * `theme.ts`에 정의된 기본 값들을 사용하거나 props로 변경 가능\n  * * 한글 문단은 `word-break: keep-all`, 영어 문단은 `word-break: break-all`로 처리\n  * * 기본적으로 `p` 태그로 렌더링되며, `$variant`를 통해 다른 태그로 변경 가능\n/**--------------------------------------------------------------------------*/\n\nconst Typography = ({\n  $variant = \"p\",\n  $color = theme.colors.grey[100],\n  $fontWeight,\n  $fontFamily = \"kr\",\n  $fontSize,\n  $marginTop,\n  $marginBottom,\n  $marginLeft,\n  $marginRight,\n  $lineHeight,\n  $textAlign,\n  children\n}) => {\n  const defaultStyles = theme.typography[$variant];\n  const resolvedFontWeight = typeof $fontWeight === \"string\" ? parseInt($fontWeight, 10) : $fontWeight;\n  return /*#__PURE__*/_jsxDEV(TypographyStyle, {\n    as: $variant,\n    $color: $color,\n    $fontWeight: resolvedFontWeight !== null && resolvedFontWeight !== void 0 ? resolvedFontWeight : defaultStyles.fontWeight,\n    $fontFamily: $fontFamily,\n    $fontSize: $fontSize !== null && $fontSize !== void 0 ? $fontSize : defaultStyles.fontSize,\n    $lineHeight: $lineHeight !== null && $lineHeight !== void 0 ? $lineHeight : defaultStyles.lineHeight,\n    $textAlign: $textAlign,\n    $marginTop: $variant !== \"span\" ? $marginTop : undefined,\n    $marginBottom: $variant !== \"span\" ? $marginBottom : undefined,\n    $marginLeft: $variant !== \"span\" ? $marginLeft : undefined,\n    $marginRight: $variant !== \"span\" ? $marginRight : undefined,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_c = Typography;\nexport const TypographyStyle = styled.span`\n  white-space: pre-wrap;\n  word-break: ${props => props.$fontFamily === \"kr\" ? \"keep-all\" : \"break-all\"};\n  color: ${props => props.$color};\n  font-weight: ${props => props.$fontWeight};\n  font-family: ${props => props.$fontFamily === \"kr\" ? theme.fonts.kr : theme.fonts.en};\n  font-size: ${props => props.$fontSize};\n  line-height: ${props => props.$lineHeight};\n  text-align: ${props => props.$textAlign || \"left\"};\n  margin-top: ${props => props.$marginTop};\n  margin-bottom: ${props => props.$marginBottom};\n  margin-left: ${props => props.$marginLeft};\n  margin-right: ${props => props.$marginRight};\n`;\n_c2 = TypographyStyle;\nexport default Typography;\nvar _c, _c2;\n$RefreshReg$(_c, \"Typography\");\n$RefreshReg$(_c2, \"TypographyStyle\");","map":{"version":3,"names":["theme","styled","jsxDEV","_jsxDEV","Typography","$variant","$color","colors","grey","$fontWeight","$fontFamily","$fontSize","$marginTop","$marginBottom","$marginLeft","$marginRight","$lineHeight","$textAlign","children","defaultStyles","typography","resolvedFontWeight","parseInt","TypographyStyle","as","fontWeight","fontSize","lineHeight","undefined","fileName","_jsxFileName","lineNumber","columnNumber","_c","span","props","fonts","kr","en","_c2","$RefreshReg$"],"sources":["/Users/gayoung/Documents/developer/project/protfolio/src/components/Typography/Typography.tsx"],"sourcesContent":["import { theme } from \"@/styles/theme\";\nimport { ReactNode } from \"react\";\nimport { styled } from \"styled-components\";\n\nexport type TypographyProps = {\n  $variant?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"p\" | \"span\";\n  $color?: string;\n  $fontWeight?: number | string;\n  $fontFamily?: \"kr\" | \"en\";\n  $fontSize?: string;\n  $marginTop?: string;\n  $marginBottom?: string;\n  $marginLeft?: string;\n  $marginRight?: string;\n  $lineHeight?: string;\n  $textAlign?: \"left\" | \"center\" | \"right\" | \"justify\";\n  children: string | ReactNode;\n};\n/**---------------------------------------------------------------------------/\n  * ! Typography 컴포넌트\n  * * 다양한 텍스트 스타일을 적용할 수 있는 컴포넌트\n  * * `$variant`: \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"p\", \"span\"으로 텍스트 유형 지정 가능\n  * * `$color`: 텍스트 색상 설정, 기본값은 `theme.colors.grey[100]`\n  * * `$fontWeight`: 텍스트의 폰트 두께 설정\n  * * `$fontFamily`: 폰트 종류 지정, `\"kr\"` (한글), `\"en\"` (영어) 선택 가능\n  * * `$fontSize`: 폰트 크기 설정\n  * * `$lineHeight`: 텍스트의 줄 높이 설정\n  * * `$textAlign`: 텍스트 정렬, `\"left\"`, `\"center\"`, `\"right\"`, `\"justify\"` 중 선택 가능\n  * * `$marginTop`, `$marginBottom`, `$marginLeft`, `$marginRight`: 텍스트 주변 마진 설정\n  * * `span` 태그를 제외한 나머지 블록 요소에서 마진이 적용됨\n  * * `theme.ts`에 정의된 기본 값들을 사용하거나 props로 변경 가능\n  * * 한글 문단은 `word-break: keep-all`, 영어 문단은 `word-break: break-all`로 처리\n  * * 기본적으로 `p` 태그로 렌더링되며, `$variant`를 통해 다른 태그로 변경 가능\n/**--------------------------------------------------------------------------*/\n\nconst Typography = ({\n  $variant = \"p\",\n  $color = theme.colors.grey[100],\n  $fontWeight,\n  $fontFamily = \"kr\",\n  $fontSize,\n  $marginTop,\n  $marginBottom,\n  $marginLeft,\n  $marginRight,\n  $lineHeight,\n  $textAlign,\n  children,\n}: TypographyProps) => {\n  const defaultStyles = theme.typography[$variant];\n  const resolvedFontWeight =\n    typeof $fontWeight === \"string\" ? parseInt($fontWeight, 10) : $fontWeight;\n\n  return (\n    <TypographyStyle\n      as={$variant}\n      $color={$color}\n      $fontWeight={resolvedFontWeight ?? defaultStyles.fontWeight}\n      $fontFamily={$fontFamily}\n      $fontSize={$fontSize ?? defaultStyles.fontSize}\n      $lineHeight={$lineHeight ?? defaultStyles.lineHeight}\n      $textAlign={$textAlign}\n      $marginTop={$variant !== \"span\" ? $marginTop : undefined}\n      $marginBottom={$variant !== \"span\" ? $marginBottom : undefined}\n      $marginLeft={$variant !== \"span\" ? $marginLeft : undefined}\n      $marginRight={$variant !== \"span\" ? $marginRight : undefined}\n    >\n      {children}\n    </TypographyStyle>\n  );\n};\n\nexport const TypographyStyle = styled.span<TypographyProps>`\n  white-space: pre-wrap;\n  word-break: ${(props) =>\n    props.$fontFamily === \"kr\" ? \"keep-all\" : \"break-all\"};\n  color: ${(props) => props.$color};\n  font-weight: ${(props) => props.$fontWeight};\n  font-family: ${(props) =>\n    props.$fontFamily === \"kr\" ? theme.fonts.kr : theme.fonts.en};\n  font-size: ${(props) => props.$fontSize};\n  line-height: ${(props) => props.$lineHeight};\n  text-align: ${(props) => props.$textAlign || \"left\"};\n  margin-top: ${(props) => props.$marginTop};\n  margin-bottom: ${(props) => props.$marginBottom};\n  margin-left: ${(props) => props.$marginLeft};\n  margin-right: ${(props) => props.$marginRight};\n`;\n\nexport default Typography;\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,MAAM,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgB3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAGA,CAAC;EAClBC,QAAQ,GAAG,GAAG;EACdC,MAAM,GAAGN,KAAK,CAACO,MAAM,CAACC,IAAI,CAAC,GAAG,CAAC;EAC/BC,WAAW;EACXC,WAAW,GAAG,IAAI;EAClBC,SAAS;EACTC,UAAU;EACVC,aAAa;EACbC,WAAW;EACXC,YAAY;EACZC,WAAW;EACXC,UAAU;EACVC;AACe,CAAC,KAAK;EACrB,MAAMC,aAAa,GAAGnB,KAAK,CAACoB,UAAU,CAACf,QAAQ,CAAC;EAChD,MAAMgB,kBAAkB,GACtB,OAAOZ,WAAW,KAAK,QAAQ,GAAGa,QAAQ,CAACb,WAAW,EAAE,EAAE,CAAC,GAAGA,WAAW;EAE3E,oBACEN,OAAA,CAACoB,eAAe;IACdC,EAAE,EAAEnB,QAAS;IACbC,MAAM,EAAEA,MAAO;IACfG,WAAW,EAAEY,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAIF,aAAa,CAACM,UAAW;IAC5Df,WAAW,EAAEA,WAAY;IACzBC,SAAS,EAAEA,SAAS,aAATA,SAAS,cAATA,SAAS,GAAIQ,aAAa,CAACO,QAAS;IAC/CV,WAAW,EAAEA,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAIG,aAAa,CAACQ,UAAW;IACrDV,UAAU,EAAEA,UAAW;IACvBL,UAAU,EAAEP,QAAQ,KAAK,MAAM,GAAGO,UAAU,GAAGgB,SAAU;IACzDf,aAAa,EAAER,QAAQ,KAAK,MAAM,GAAGQ,aAAa,GAAGe,SAAU;IAC/Dd,WAAW,EAAET,QAAQ,KAAK,MAAM,GAAGS,WAAW,GAAGc,SAAU;IAC3Db,YAAY,EAAEV,QAAQ,KAAK,MAAM,GAAGU,YAAY,GAAGa,SAAU;IAAAV,QAAA,EAE5DA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEtB,CAAC;AAACC,EAAA,GAnCI7B,UAAU;AAqChB,OAAO,MAAMmB,eAAe,GAAGtB,MAAM,CAACiC,IAAqB;AAC3D;AACA,gBAAiBC,KAAK,IAClBA,KAAK,CAACzB,WAAW,KAAK,IAAI,GAAG,UAAU,GAAG,WAAW;AACzD,WAAYyB,KAAK,IAAKA,KAAK,CAAC7B,MAAM;AAClC,iBAAkB6B,KAAK,IAAKA,KAAK,CAAC1B,WAAW;AAC7C,iBAAkB0B,KAAK,IACnBA,KAAK,CAACzB,WAAW,KAAK,IAAI,GAAGV,KAAK,CAACoC,KAAK,CAACC,EAAE,GAAGrC,KAAK,CAACoC,KAAK,CAACE,EAAE;AAChE,eAAgBH,KAAK,IAAKA,KAAK,CAACxB,SAAS;AACzC,iBAAkBwB,KAAK,IAAKA,KAAK,CAACnB,WAAW;AAC7C,gBAAiBmB,KAAK,IAAKA,KAAK,CAAClB,UAAU,IAAI,MAAM;AACrD,gBAAiBkB,KAAK,IAAKA,KAAK,CAACvB,UAAU;AAC3C,mBAAoBuB,KAAK,IAAKA,KAAK,CAACtB,aAAa;AACjD,iBAAkBsB,KAAK,IAAKA,KAAK,CAACrB,WAAW;AAC7C,kBAAmBqB,KAAK,IAAKA,KAAK,CAACpB,YAAY;AAC/C,CAAC;AAACwB,GAAA,GAfWhB,eAAe;AAiB5B,eAAenB,UAAU;AAAC,IAAA6B,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}