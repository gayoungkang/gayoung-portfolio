{"ast":null,"code":"import{theme}from\"@/styles/theme\";import{styled}from\"styled-components\";import{jsx as _jsx}from\"react/jsx-runtime\";/**---------------------------------------------------------------------------/\n  * ! Typography 컴포넌트\n  * * 다양한 텍스트 스타일을 적용할 수 있는 컴포넌트\n  * * `$variant`: \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"p\", \"span\"으로 텍스트 유형 지정 가능\n  * * `$color`: 텍스트 색상 설정, 기본값은 `theme.colors.grey[100]`\n  * * `$fontWeight`: 텍스트의 폰트 두께 설정\n  * * `$fontFamily`: 폰트 종류 지정, `\"kr\"` (한글), `\"en\"` (영어) 선택 가능\n  * * `$fontSize`: 폰트 크기 설정\n  * * `$lineHeight`: 텍스트의 줄 높이 설정\n  * * `$textAlign`: 텍스트 정렬, `\"left\"`, `\"center\"`, `\"right\"`, `\"justify\"` 중 선택 가능\n  * * `$marginTop`, `$marginBottom`, `$marginLeft`, `$marginRight`: 텍스트 주변 마진 설정\n  * * `span` 태그를 제외한 나머지 블록 요소에서 마진이 적용됨\n  * * `theme.ts`에 정의된 기본 값들을 사용하거나 props로 변경 가능\n  * * 한글 문단은 `word-break: keep-all`, 영어 문단은 `word-break: break-all`로 처리\n  * * 기본적으로 `p` 태그로 렌더링되며, `$variant`를 통해 다른 태그로 변경 가능\n/**--------------------------------------------------------------------------*/const Typography=_ref=>{let{$variant=\"p\",$color=theme.colors.grey[100],$fontWeight,$fontFamily=\"kr\",$fontSize,$marginTop,$marginBottom,$marginLeft,$marginRight,$lineHeight,$textAlign,children}=_ref;const defaultStyles=theme.typography[$variant];const resolvedFontWeight=typeof $fontWeight===\"string\"?parseInt($fontWeight,10):$fontWeight;return/*#__PURE__*/_jsx(TypographyStyle,{as:$variant,$color:$color,$fontWeight:resolvedFontWeight!==null&&resolvedFontWeight!==void 0?resolvedFontWeight:defaultStyles.fontWeight,$fontFamily:$fontFamily,$fontSize:$fontSize!==null&&$fontSize!==void 0?$fontSize:defaultStyles.fontSize,$lineHeight:$lineHeight!==null&&$lineHeight!==void 0?$lineHeight:defaultStyles.lineHeight,$textAlign:$textAlign,$marginTop:$variant!==\"span\"?$marginTop:undefined,$marginBottom:$variant!==\"span\"?$marginBottom:undefined,$marginLeft:$variant!==\"span\"?$marginLeft:undefined,$marginRight:$variant!==\"span\"?$marginRight:undefined,children:children});};export const TypographyStyle=styled.span`\n  white-space: pre-wrap;\n  word-break: ${props=>props.$fontFamily===\"kr\"?\"keep-all\":\"break-all\"};\n  color: ${props=>props.$color};\n  font-weight: ${props=>props.$fontWeight};\n  font-family: ${props=>props.$fontFamily===\"kr\"?theme.fonts.kr:theme.fonts.en};\n  font-size: ${props=>props.$fontSize};\n  line-height: ${props=>props.$lineHeight};\n  text-align: ${props=>props.$textAlign||\"left\"};\n  margin-top: ${props=>props.$marginTop};\n  margin-bottom: ${props=>props.$marginBottom};\n  margin-left: ${props=>props.$marginLeft};\n  margin-right: ${props=>props.$marginRight};\n`;export default Typography;","map":{"version":3,"names":["theme","styled","jsx","_jsx","Typography","_ref","$variant","$color","colors","grey","$fontWeight","$fontFamily","$fontSize","$marginTop","$marginBottom","$marginLeft","$marginRight","$lineHeight","$textAlign","children","defaultStyles","typography","resolvedFontWeight","parseInt","TypographyStyle","as","fontWeight","fontSize","lineHeight","undefined","span","props","fonts","kr","en"],"sources":["/Users/gayoung/Documents/developer/project/protfolio/src/components/Typography/Typography.tsx"],"sourcesContent":["import { theme } from \"@/styles/theme\";\nimport { ReactNode } from \"react\";\nimport { styled } from \"styled-components\";\n\nexport type TypographyProps = {\n  $variant?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"p\" | \"span\";\n  $color?: string;\n  $fontWeight?: number | string;\n  $fontFamily?: \"kr\" | \"en\";\n  $fontSize?: string;\n  $marginTop?: string;\n  $marginBottom?: string;\n  $marginLeft?: string;\n  $marginRight?: string;\n  $lineHeight?: string;\n  $textAlign?: \"left\" | \"center\" | \"right\" | \"justify\";\n  children: string | ReactNode;\n};\n/**---------------------------------------------------------------------------/\n  * ! Typography 컴포넌트\n  * * 다양한 텍스트 스타일을 적용할 수 있는 컴포넌트\n  * * `$variant`: \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"p\", \"span\"으로 텍스트 유형 지정 가능\n  * * `$color`: 텍스트 색상 설정, 기본값은 `theme.colors.grey[100]`\n  * * `$fontWeight`: 텍스트의 폰트 두께 설정\n  * * `$fontFamily`: 폰트 종류 지정, `\"kr\"` (한글), `\"en\"` (영어) 선택 가능\n  * * `$fontSize`: 폰트 크기 설정\n  * * `$lineHeight`: 텍스트의 줄 높이 설정\n  * * `$textAlign`: 텍스트 정렬, `\"left\"`, `\"center\"`, `\"right\"`, `\"justify\"` 중 선택 가능\n  * * `$marginTop`, `$marginBottom`, `$marginLeft`, `$marginRight`: 텍스트 주변 마진 설정\n  * * `span` 태그를 제외한 나머지 블록 요소에서 마진이 적용됨\n  * * `theme.ts`에 정의된 기본 값들을 사용하거나 props로 변경 가능\n  * * 한글 문단은 `word-break: keep-all`, 영어 문단은 `word-break: break-all`로 처리\n  * * 기본적으로 `p` 태그로 렌더링되며, `$variant`를 통해 다른 태그로 변경 가능\n/**--------------------------------------------------------------------------*/\n\nconst Typography = ({\n  $variant = \"p\",\n  $color = theme.colors.grey[100],\n  $fontWeight,\n  $fontFamily = \"kr\",\n  $fontSize,\n  $marginTop,\n  $marginBottom,\n  $marginLeft,\n  $marginRight,\n  $lineHeight,\n  $textAlign,\n  children,\n}: TypographyProps) => {\n  const defaultStyles = theme.typography[$variant];\n  const resolvedFontWeight =\n    typeof $fontWeight === \"string\" ? parseInt($fontWeight, 10) : $fontWeight;\n\n  return (\n    <TypographyStyle\n      as={$variant}\n      $color={$color}\n      $fontWeight={resolvedFontWeight ?? defaultStyles.fontWeight}\n      $fontFamily={$fontFamily}\n      $fontSize={$fontSize ?? defaultStyles.fontSize}\n      $lineHeight={$lineHeight ?? defaultStyles.lineHeight}\n      $textAlign={$textAlign}\n      $marginTop={$variant !== \"span\" ? $marginTop : undefined}\n      $marginBottom={$variant !== \"span\" ? $marginBottom : undefined}\n      $marginLeft={$variant !== \"span\" ? $marginLeft : undefined}\n      $marginRight={$variant !== \"span\" ? $marginRight : undefined}\n    >\n      {children}\n    </TypographyStyle>\n  );\n};\n\nexport const TypographyStyle = styled.span<TypographyProps>`\n  white-space: pre-wrap;\n  word-break: ${(props) =>\n    props.$fontFamily === \"kr\" ? \"keep-all\" : \"break-all\"};\n  color: ${(props) => props.$color};\n  font-weight: ${(props) => props.$fontWeight};\n  font-family: ${(props) =>\n    props.$fontFamily === \"kr\" ? theme.fonts.kr : theme.fonts.en};\n  font-size: ${(props) => props.$fontSize};\n  line-height: ${(props) => props.$lineHeight};\n  text-align: ${(props) => props.$textAlign || \"left\"};\n  margin-top: ${(props) => props.$marginTop};\n  margin-bottom: ${(props) => props.$marginBottom};\n  margin-left: ${(props) => props.$marginLeft};\n  margin-right: ${(props) => props.$marginRight};\n`;\n\nexport default Typography;\n"],"mappings":"AAAA,OAASA,KAAK,KAAQ,gBAAgB,CAEtC,OAASC,MAAM,KAAQ,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAgB3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAEA,KAAM,CAAAC,UAAU,CAAGC,IAAA,EAaI,IAbH,CAClBC,QAAQ,CAAG,GAAG,CACdC,MAAM,CAAGP,KAAK,CAACQ,MAAM,CAACC,IAAI,CAAC,GAAG,CAAC,CAC/BC,WAAW,CACXC,WAAW,CAAG,IAAI,CAClBC,SAAS,CACTC,UAAU,CACVC,aAAa,CACbC,WAAW,CACXC,YAAY,CACZC,WAAW,CACXC,UAAU,CACVC,QACe,CAAC,CAAAd,IAAA,CAChB,KAAM,CAAAe,aAAa,CAAGpB,KAAK,CAACqB,UAAU,CAACf,QAAQ,CAAC,CAChD,KAAM,CAAAgB,kBAAkB,CACtB,MAAO,CAAAZ,WAAW,GAAK,QAAQ,CAAGa,QAAQ,CAACb,WAAW,CAAE,EAAE,CAAC,CAAGA,WAAW,CAE3E,mBACEP,IAAA,CAACqB,eAAe,EACdC,EAAE,CAAEnB,QAAS,CACbC,MAAM,CAAEA,MAAO,CACfG,WAAW,CAAEY,kBAAkB,SAAlBA,kBAAkB,UAAlBA,kBAAkB,CAAIF,aAAa,CAACM,UAAW,CAC5Df,WAAW,CAAEA,WAAY,CACzBC,SAAS,CAAEA,SAAS,SAATA,SAAS,UAATA,SAAS,CAAIQ,aAAa,CAACO,QAAS,CAC/CV,WAAW,CAAEA,WAAW,SAAXA,WAAW,UAAXA,WAAW,CAAIG,aAAa,CAACQ,UAAW,CACrDV,UAAU,CAAEA,UAAW,CACvBL,UAAU,CAAEP,QAAQ,GAAK,MAAM,CAAGO,UAAU,CAAGgB,SAAU,CACzDf,aAAa,CAAER,QAAQ,GAAK,MAAM,CAAGQ,aAAa,CAAGe,SAAU,CAC/Dd,WAAW,CAAET,QAAQ,GAAK,MAAM,CAAGS,WAAW,CAAGc,SAAU,CAC3Db,YAAY,CAAEV,QAAQ,GAAK,MAAM,CAAGU,YAAY,CAAGa,SAAU,CAAAV,QAAA,CAE5DA,QAAQ,CACM,CAAC,CAEtB,CAAC,CAED,MAAO,MAAM,CAAAK,eAAe,CAAGvB,MAAM,CAAC6B,IAAqB;AAC3D;AACA,gBAAiBC,KAAK,EAClBA,KAAK,CAACpB,WAAW,GAAK,IAAI,CAAG,UAAU,CAAG,WAAW;AACzD,WAAYoB,KAAK,EAAKA,KAAK,CAACxB,MAAM;AAClC,iBAAkBwB,KAAK,EAAKA,KAAK,CAACrB,WAAW;AAC7C,iBAAkBqB,KAAK,EACnBA,KAAK,CAACpB,WAAW,GAAK,IAAI,CAAGX,KAAK,CAACgC,KAAK,CAACC,EAAE,CAAGjC,KAAK,CAACgC,KAAK,CAACE,EAAE;AAChE,eAAgBH,KAAK,EAAKA,KAAK,CAACnB,SAAS;AACzC,iBAAkBmB,KAAK,EAAKA,KAAK,CAACd,WAAW;AAC7C,gBAAiBc,KAAK,EAAKA,KAAK,CAACb,UAAU,EAAI,MAAM;AACrD,gBAAiBa,KAAK,EAAKA,KAAK,CAAClB,UAAU;AAC3C,mBAAoBkB,KAAK,EAAKA,KAAK,CAACjB,aAAa;AACjD,iBAAkBiB,KAAK,EAAKA,KAAK,CAAChB,WAAW;AAC7C,kBAAmBgB,KAAK,EAAKA,KAAK,CAACf,YAAY;AAC/C,CAAC,CAED,cAAe,CAAAZ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}