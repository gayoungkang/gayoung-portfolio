{"ast":null,"code":"var _jsxFileName = \"/Users/gayoung/Documents/developer/project/protfolio/src/components/Typography/Typography.tsx\";\nimport { theme } from \"@/styles/theme\";\nimport { css, styled } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**---------------------------------------------------------------------------/\n  * ! Typography 컴포넌트\n  * * 다양한 텍스트 스타일을 적용할 수 있는 컴포넌트\n  * * `$variant`: \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"p\", \"span\"으로 텍스트 유형 지정 가능\n  * * `$color`: 텍스트 색상 설정, 기본값은 `theme.colors.grey[100]`\n  * * `$fontWeight`: 텍스트의 폰트 두께 설정\n  * * `$fontFamily`: 폰트 종류 지정, `\"kr\"` (한글), `\"en\"` (영어) 선택 가능\n  * * `$fontSize`: 폰트 크기 설정\n  * * `$lineHeight`: 텍스트의 줄 높이 설정\n  * * `$textAlign`: 텍스트 정렬, `\"left\"`, `\"center\"`, `\"right\"`, `\"justify\"` 중 선택 가능\n  * * `$marginTop`, `$marginBottom`, `$marginLeft`, `$marginRight`: 텍스트 주변 마진 설정\n  * * `span` 태그를 제외한 나머지 블록 요소에서 마진이 적용됨\n  * * `theme.ts`에 정의된 기본 값들을 사용하거나 props로 변경 가능\n  * * 한글 문단은 `word-break: keep-all`, 영어 문단은 `word-break: break-all`로 처리\n  * * 기본적으로 `p` 태그로 렌더링되며, `$variant`를 통해 다른 태그로 변경 가능\n/**--------------------------------------------------------------------------*/\n\nconst Typography = ({\n  $variant = \"p\",\n  $color = theme.colors.grey[100],\n  $fontWeight,\n  $fontFamily = \"kr\",\n  $fontSize,\n  $marginTop,\n  $marginBottom,\n  $marginLeft,\n  $marginRight,\n  $lineHeight,\n  $textAlign,\n  children,\n  $sx = {}\n}) => {\n  const defaultStyles = theme.typography[$variant];\n  const resolvedFontWeight = typeof $fontWeight === \"string\" ? parseInt($fontWeight, 10) : $fontWeight;\n  return /*#__PURE__*/_jsxDEV(TypographyStyle, {\n    as: $variant,\n    $color: $color,\n    $fontWeight: resolvedFontWeight !== null && resolvedFontWeight !== void 0 ? resolvedFontWeight : defaultStyles.fontWeight,\n    $fontFamily: $fontFamily,\n    $fontSize: $fontSize !== null && $fontSize !== void 0 ? $fontSize : defaultStyles.fontSize,\n    $lineHeight: $lineHeight !== null && $lineHeight !== void 0 ? $lineHeight : defaultStyles.lineHeight,\n    $textAlign: $textAlign,\n    $marginTop: $variant !== \"span\" ? $marginTop : undefined,\n    $marginBottom: $variant !== \"span\" ? $marginBottom : undefined,\n    $marginLeft: $variant !== \"span\" ? $marginLeft : undefined,\n    $marginRight: $variant !== \"span\" ? $marginRight : undefined,\n    $sx: $sx,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_c = Typography;\nexport const TypographyStyle = styled.span`\n  white-space: pre-wrap;\n  word-break: ${props => props.$fontFamily === \"kr\" ? \"keep-all\" : \"break-all\"};\n  color: ${props => props.$color};\n  font-weight: ${props => props.$fontWeight};\n  font-family: ${props => props.$fontFamily === \"kr\" ? theme.fonts.kr : theme.fonts.en};\n  font-size: ${props => props.$fontSize};\n  line-height: ${props => props.$lineHeight};\n  text-align: ${props => props.$textAlign || \"left\"};\n  margin-top: ${props => props.$marginTop};\n  margin-bottom: ${props => props.$marginBottom};\n  margin-left: ${props => props.$marginLeft};\n  margin-right: ${props => props.$marginRight};\n  ${props => props.$sx && css({\n  ...props.$sx\n})}\n`;\n_c2 = TypographyStyle;\nexport default Typography;\nvar _c, _c2;\n$RefreshReg$(_c, \"Typography\");\n$RefreshReg$(_c2, \"TypographyStyle\");","map":{"version":3,"names":["theme","css","styled","jsxDEV","_jsxDEV","Typography","$variant","$color","colors","grey","$fontWeight","$fontFamily","$fontSize","$marginTop","$marginBottom","$marginLeft","$marginRight","$lineHeight","$textAlign","children","$sx","defaultStyles","typography","resolvedFontWeight","parseInt","TypographyStyle","as","fontWeight","fontSize","lineHeight","undefined","fileName","_jsxFileName","lineNumber","columnNumber","_c","span","props","fonts","kr","en","_c2","$RefreshReg$"],"sources":["/Users/gayoung/Documents/developer/project/protfolio/src/components/Typography/Typography.tsx"],"sourcesContent":["import { theme } from \"@/styles/theme\";\nimport { ReactNode } from \"react\";\nimport { css, styled } from \"styled-components\";\n\nexport type TypographyProps = {\n  $variant?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"p\" | \"span\";\n  $color?: string;\n  $fontWeight?: number | string;\n  $fontFamily?: \"kr\" | \"en\";\n  $fontSize?: string;\n  $marginTop?: string;\n  $marginBottom?: string;\n  $marginLeft?: string;\n  $marginRight?: string;\n  $lineHeight?: string;\n  $textAlign?: \"left\" | \"center\" | \"right\" | \"justify\";\n  children: string | ReactNode;\n  $sx?: Record<string, any>;\n};\n/**---------------------------------------------------------------------------/\n  * ! Typography 컴포넌트\n  * * 다양한 텍스트 스타일을 적용할 수 있는 컴포넌트\n  * * `$variant`: \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"p\", \"span\"으로 텍스트 유형 지정 가능\n  * * `$color`: 텍스트 색상 설정, 기본값은 `theme.colors.grey[100]`\n  * * `$fontWeight`: 텍스트의 폰트 두께 설정\n  * * `$fontFamily`: 폰트 종류 지정, `\"kr\"` (한글), `\"en\"` (영어) 선택 가능\n  * * `$fontSize`: 폰트 크기 설정\n  * * `$lineHeight`: 텍스트의 줄 높이 설정\n  * * `$textAlign`: 텍스트 정렬, `\"left\"`, `\"center\"`, `\"right\"`, `\"justify\"` 중 선택 가능\n  * * `$marginTop`, `$marginBottom`, `$marginLeft`, `$marginRight`: 텍스트 주변 마진 설정\n  * * `span` 태그를 제외한 나머지 블록 요소에서 마진이 적용됨\n  * * `theme.ts`에 정의된 기본 값들을 사용하거나 props로 변경 가능\n  * * 한글 문단은 `word-break: keep-all`, 영어 문단은 `word-break: break-all`로 처리\n  * * 기본적으로 `p` 태그로 렌더링되며, `$variant`를 통해 다른 태그로 변경 가능\n/**--------------------------------------------------------------------------*/\n\nconst Typography = ({\n  $variant = \"p\",\n  $color = theme.colors.grey[100],\n  $fontWeight,\n  $fontFamily = \"kr\",\n  $fontSize,\n  $marginTop,\n  $marginBottom,\n  $marginLeft,\n  $marginRight,\n  $lineHeight,\n  $textAlign,\n  children,\n  $sx = {},\n}: TypographyProps) => {\n  const defaultStyles = theme.typography[$variant];\n  const resolvedFontWeight =\n    typeof $fontWeight === \"string\" ? parseInt($fontWeight, 10) : $fontWeight;\n\n  return (\n    <TypographyStyle\n      as={$variant}\n      $color={$color}\n      $fontWeight={resolvedFontWeight ?? defaultStyles.fontWeight}\n      $fontFamily={$fontFamily}\n      $fontSize={$fontSize ?? defaultStyles.fontSize}\n      $lineHeight={$lineHeight ?? defaultStyles.lineHeight}\n      $textAlign={$textAlign}\n      $marginTop={$variant !== \"span\" ? $marginTop : undefined}\n      $marginBottom={$variant !== \"span\" ? $marginBottom : undefined}\n      $marginLeft={$variant !== \"span\" ? $marginLeft : undefined}\n      $marginRight={$variant !== \"span\" ? $marginRight : undefined}\n      $sx={$sx}\n    >\n      {children}\n    </TypographyStyle>\n  );\n};\n\nexport const TypographyStyle = styled.span<TypographyProps>`\n  white-space: pre-wrap;\n  word-break: ${(props) =>\n    props.$fontFamily === \"kr\" ? \"keep-all\" : \"break-all\"};\n  color: ${(props) => props.$color};\n  font-weight: ${(props) => props.$fontWeight};\n  font-family: ${(props) =>\n    props.$fontFamily === \"kr\" ? theme.fonts.kr : theme.fonts.en};\n  font-size: ${(props) => props.$fontSize};\n  line-height: ${(props) => props.$lineHeight};\n  text-align: ${(props) => props.$textAlign || \"left\"};\n  margin-top: ${(props) => props.$marginTop};\n  margin-bottom: ${(props) => props.$marginBottom};\n  margin-left: ${(props) => props.$marginLeft};\n  margin-right: ${(props) => props.$marginRight};\n  ${(props) => props.$sx && css({ ...props.$sx })}\n`;\n\nexport default Typography;\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,GAAG,EAAEC,MAAM,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiBhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAGA,CAAC;EAClBC,QAAQ,GAAG,GAAG;EACdC,MAAM,GAAGP,KAAK,CAACQ,MAAM,CAACC,IAAI,CAAC,GAAG,CAAC;EAC/BC,WAAW;EACXC,WAAW,GAAG,IAAI;EAClBC,SAAS;EACTC,UAAU;EACVC,aAAa;EACbC,WAAW;EACXC,YAAY;EACZC,WAAW;EACXC,UAAU;EACVC,QAAQ;EACRC,GAAG,GAAG,CAAC;AACQ,CAAC,KAAK;EACrB,MAAMC,aAAa,GAAGrB,KAAK,CAACsB,UAAU,CAAChB,QAAQ,CAAC;EAChD,MAAMiB,kBAAkB,GACtB,OAAOb,WAAW,KAAK,QAAQ,GAAGc,QAAQ,CAACd,WAAW,EAAE,EAAE,CAAC,GAAGA,WAAW;EAE3E,oBACEN,OAAA,CAACqB,eAAe;IACdC,EAAE,EAAEpB,QAAS;IACbC,MAAM,EAAEA,MAAO;IACfG,WAAW,EAAEa,kBAAkB,aAAlBA,kBAAkB,cAAlBA,kBAAkB,GAAIF,aAAa,CAACM,UAAW;IAC5DhB,WAAW,EAAEA,WAAY;IACzBC,SAAS,EAAEA,SAAS,aAATA,SAAS,cAATA,SAAS,GAAIS,aAAa,CAACO,QAAS;IAC/CX,WAAW,EAAEA,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAII,aAAa,CAACQ,UAAW;IACrDX,UAAU,EAAEA,UAAW;IACvBL,UAAU,EAAEP,QAAQ,KAAK,MAAM,GAAGO,UAAU,GAAGiB,SAAU;IACzDhB,aAAa,EAAER,QAAQ,KAAK,MAAM,GAAGQ,aAAa,GAAGgB,SAAU;IAC/Df,WAAW,EAAET,QAAQ,KAAK,MAAM,GAAGS,WAAW,GAAGe,SAAU;IAC3Dd,YAAY,EAAEV,QAAQ,KAAK,MAAM,GAAGU,YAAY,GAAGc,SAAU;IAC7DV,GAAG,EAAEA,GAAI;IAAAD,QAAA,EAERA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAEtB,CAAC;AAACC,EAAA,GArCI9B,UAAU;AAuChB,OAAO,MAAMoB,eAAe,GAAGvB,MAAM,CAACkC,IAAqB;AAC3D;AACA,gBAAiBC,KAAK,IAClBA,KAAK,CAAC1B,WAAW,KAAK,IAAI,GAAG,UAAU,GAAG,WAAW;AACzD,WAAY0B,KAAK,IAAKA,KAAK,CAAC9B,MAAM;AAClC,iBAAkB8B,KAAK,IAAKA,KAAK,CAAC3B,WAAW;AAC7C,iBAAkB2B,KAAK,IACnBA,KAAK,CAAC1B,WAAW,KAAK,IAAI,GAAGX,KAAK,CAACsC,KAAK,CAACC,EAAE,GAAGvC,KAAK,CAACsC,KAAK,CAACE,EAAE;AAChE,eAAgBH,KAAK,IAAKA,KAAK,CAACzB,SAAS;AACzC,iBAAkByB,KAAK,IAAKA,KAAK,CAACpB,WAAW;AAC7C,gBAAiBoB,KAAK,IAAKA,KAAK,CAACnB,UAAU,IAAI,MAAM;AACrD,gBAAiBmB,KAAK,IAAKA,KAAK,CAACxB,UAAU;AAC3C,mBAAoBwB,KAAK,IAAKA,KAAK,CAACvB,aAAa;AACjD,iBAAkBuB,KAAK,IAAKA,KAAK,CAACtB,WAAW;AAC7C,kBAAmBsB,KAAK,IAAKA,KAAK,CAACrB,YAAY;AAC/C,IAAKqB,KAAK,IAAKA,KAAK,CAACjB,GAAG,IAAInB,GAAG,CAAC;EAAE,GAAGoC,KAAK,CAACjB;AAAI,CAAC,CAAC;AACjD,CAAC;AAACqB,GAAA,GAhBWhB,eAAe;AAkB5B,eAAepB,UAAU;AAAC,IAAA8B,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}